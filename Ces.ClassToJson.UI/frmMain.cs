using System.Reflection;
using System.Text;

namespace Ces.ClassToJson.UI
{
    public partial class frmMain : Form
    {
        public frmMain()
        {
            InitializeComponent();
        }

        private Ces.ClassToJson.ClassToJson _cls;
        private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
        private List<string> _types = new List<string>();
        private List<TreeNode> _selectedNodes = new();
        private bool _expandAll;

        private async void btnReadObjects_Click(object sender, EventArgs e)
        {
            var option = new Ces.ClassToJson.ClassToJsonOption
            {
                AssemblyPath = @"C:\Users\Caspian\Desktop\Ces.Caspian\Ces.Caspian.Models\bin\Debug\net8.0\Ces.Caspian.Models.dll"
            };

            if (_cls == null)
                _cls = new Ces.ClassToJson.ClassToJson(option);

            var types = await _cls.GetTypeListAsync(_cancellationTokenSource.Token);

            if (_types != null && _types.Count > 0)
            {
                _types.Clear();
                _types.Capacity = 0;
            }

            if (tvTypes.Nodes.Count > 0)
                tvTypes.Nodes.Clear();

            foreach (var type in types)
                if (!_types.Contains(type.FullName))
                    _types.Add(type.FullName);

            foreach (string type in _types)
            {
                var typeNames = type.Split('.');
                var currentNodes = tvTypes.Nodes;

                //This loop generated by ChatGPt
                foreach (string name in typeNames)
                {
                    var node = currentNodes.Cast<TreeNode>().FirstOrDefault(x => x.Text == name);

                    if (node == null)
                    {
                        node = new TreeNode(name);
                        currentNodes.Add(node);
                    }

                    // Move to next level
                    currentNodes = node.Nodes;
                }
            }
        }

        private async void btnGetProperties_Click(object sender, EventArgs e)
        {
            if (tvTypes.SelectedNode == null)
            {
                MessageBox.Show("Selected a node");
                return;
            }

            var nodeFullPath = tvTypes.SelectedNode.FullPath.Replace(@"\", ".");
            var result = await GetProeprtiesAsync(nodeFullPath);

            lbProperties.Items.Clear();

            foreach (PropertyInfo prop in result)
                lbProperties.Items.Add(prop.Name);
        }

        private void btnExpandAll_Click(object sender, EventArgs e)
        {
            if (!_expandAll)
            {
                tvTypes.ExpandAll();
                _expandAll = true;
            }
            else
            {
                tvTypes.CollapseAll();
                _expandAll = false;
            }
        }

        private async void btnConvertToJson_Click(object sender, EventArgs e)
        {           
            var selectedNodes = GetSelectedNodes();

            if (selectedNodes == null || selectedNodes.Count == 0)
            {
                MessageBox.Show("Selected a node");
                return;
            }

            await ConvertToJson(selectedNodes);
        }

        private async Task ConvertToJson(List<TreeNode> treeNodes)
        {
            var sb = new StringBuilder();
            var json = string.Empty;

            sb.Append("{");

            for (int n = 0; n < treeNodes.Count; n++)
            {
                var nodeFullPath = treeNodes[n].FullPath.Replace(@"\", ".");
                var result = await GetProeprtiesAsync(nodeFullPath);

                sb.Append($"\"{nodeFullPath}\":");
                sb.Append("{");

                for (int i = 0; i < result.Count; i++)
                {
                    if (i == result.Count - 1)
                        sb.Append($"\"{result[i].Name}\" : \"\"");
                    else
                        sb.Append($"\"{result[i].Name}\" : \"\",");
                }

                if (n == treeNodes.Count - 1)
                    sb.Append("}");
                else
                    sb.Append("},");
            }

            sb.Append("}");

            json = sb.ToString();
            txtJsonResult.Text = json;
        }

        private List<TreeNode> GetSelectedNodes()
        {
            foreach (TreeNode treeNode in tvTypes.Nodes)
            {
                if (treeNode.Checked)
                    _selectedNodes.Add(treeNode);

                GetSelectedChildNodes(treeNode);
            }

            return _selectedNodes;
        }

        private void GetSelectedChildNodes(TreeNode node)
        {
            foreach (TreeNode treeNode in node.Nodes)
            {
                if (treeNode.Checked)
                    _selectedNodes.Add(treeNode);

                if (treeNode.Nodes.Count > 0)
                    GetSelectedChildNodes(treeNode);
            }
        }

        private async Task<List<PropertyInfo>> GetProeprtiesAsync(string typeFullPath)
        {
            if (_cls == null)
            {
                var option = new Ces.ClassToJson.ClassToJsonOption
                {
                    AssemblyPath = @"C:\Users\Caspian\Desktop\Ces.Caspian\Ces.Caspian.Models\bin\Debug\net8.0\Ces.Caspian.Models.dll"
                };

                _cls = new Ces.ClassToJson.ClassToJson(option);
            }

            var result = await _cls.GetPropertyListAsync(typeFullPath, _cancellationTokenSource.Token);
            return result;
        }
    }
}
