namespace Ces.ClassToJson.UI
{
    public partial class frmMain : Form
    {
        public frmMain()
        {
            InitializeComponent();
        }

        private Ces.ClassToJson.ClassToJson _cls;
        private string _assembplyPath;
        private string _outputPath;
        private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
        private List<string> _selectedNodes = new();
        private bool _expandAll;

        private async void btnReadObjects_Click(object sender, EventArgs e)
        {
            try
            {
                btnReadObjects.Enabled = false;
                await GetAssemblyObjectsClassAsync();
            }
            catch (Exception ex)
            {
                _cancellationTokenSource.Cancel();
                MessageBox.Show(ex.Message); ;
            }
            finally
            {
                btnReadObjects.Enabled = true;
            }
        }

        private void btnExpandAll_Click(object sender, EventArgs e)
        {
            if (!_expandAll)
            {
                tvTypes.ExpandAll();
                _expandAll = true;
            }
            else
            {
                tvTypes.CollapseAll();
                _expandAll = false;
            }
        }

        private async void btnConvertToJson_Click(object sender, EventArgs e)
        {
            try
            {
                btnConvertToJson.Enabled = false;
                _cancellationTokenSource = new CancellationTokenSource();

                if (chkAllObjects.Checked)
                    await ConvertAllAssembly();
                else
                    await ConvertSelectedNodes();
            }
            catch (Exception ex)
            {
                _cancellationTokenSource.Cancel();
                MessageBox.Show(ex.Message);
            }
            finally
            {
                btnConvertToJson.Enabled = true;
            }

        }

        private async Task GetAssemblyObjectsClassAsync()
        {
            var classList = new List<string>();
            var types = new List<Type>();

            try
            {
                types = await _cls.GetObjectsAsync(_cancellationTokenSource.Token);
            }
            catch (Exception ex)
            {
                _cancellationTokenSource.Cancel();
                MessageBox.Show(ex.Message);
            }

            if (tvTypes.Nodes.Count > 0)
                tvTypes.Nodes.Clear();

            foreach (var type in types)
                if (!classList.Contains(type.FullName))
                    classList.Add(type.FullName);

            foreach (string type in classList)
            {
                var typeNames = type.Split('.');
                var currentNodes = tvTypes.Nodes;

                //This loop generated by ChatGPt
                foreach (string name in typeNames)
                {
                    var node = currentNodes.Cast<TreeNode>().FirstOrDefault(x => x.Text == name);

                    if (node == null)
                    {
                        node = new TreeNode(name);
                        currentNodes.Add(node);
                    }

                    // Move to next level
                    currentNodes = node.Nodes;
                }
            }
        }

        private async Task ConvertSelectedNodes()
        {
            _selectedNodes.Clear();
            GetSelectedNodes();

            if (_selectedNodes == null || _selectedNodes.Count == 0)
            {
                MessageBox.Show("Select one node at least");
                return;
            }

            await _cls.ConvertToJsonAsync(_selectedNodes, _cancellationTokenSource.Token);
        }

        private async Task ConvertAllAssembly()
        {
            await _cls.ConvertToJsonAsync(_cancellationTokenSource.Token);
        }

        private void GetSelectedNodes(TreeNode node = null)
        {
            foreach (TreeNode treeNode in node?.Nodes ?? tvTypes.Nodes)
            {
                if (treeNode.Checked)
                    _selectedNodes.Add(treeNode.FullPath.Replace(@"\", "."));

                if (treeNode.Nodes.Count > 0)
                    GetSelectedNodes(treeNode);
            }
        }

        private void btnSelectFile_Click(object sender, EventArgs e)
        {
            var open = new OpenFileDialog();
            open.Multiselect = false;
            open.RestoreDirectory = true;
            open.Title = "Choose assembly";
            open.Filter = "DTO Models(*.dll)|*.dll";

            try
            {
                if (open.ShowDialog(this) == DialogResult.OK)
                {
                    _assembplyPath = open.FileName;
                    lblAssmeblyPath.Text = "Assembly: " + _assembplyPath;
                    CreateInstance();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnClearSelection_Click(object sender, EventArgs e)
        {
            ClearSelectedNodes();
        }

        private void ClearSelectedNodes(TreeNode node = null)
        {
            foreach (TreeNode treeNode in node?.Nodes ?? tvTypes.Nodes)
            {
                if (treeNode.Checked)
                    treeNode.Checked = false;

                if (treeNode.Nodes.Count > 0)
                    ClearSelectedNodes(treeNode);
            }
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            var save = new SaveFileDialog();
            save.AddExtension = true;
            save.CheckWriteAccess = true;
            save.Filter = "Json|*.json";
            save.DefaultExt = ".json";
            save.FileName = "ConvertToJson" + DateTime.Now.ToString(" _ yyyy-MM-dd _ HH-mm-ss");

            try
            {
                if (save.ShowDialog(this) == DialogResult.OK)
                {
                    _outputPath = save.FileName;
                    lblOutputPath.Text = "Save: " + _outputPath;
                    CreateInstance();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void chkUseSamePath_CheckedChanged(object sender, EventArgs e)
        {
            CreateInstance();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            _cancellationTokenSource.Cancel();
        }

        private void chkOverwrite_CheckedChanged(object sender, EventArgs e)
        {
            CreateInstance();
        }

        private void CreateInstance()
        {
            try
            {
                var option = new Ces.ClassToJson.ClassToJsonOption
                {
                    AssemblyPath = _assembplyPath,
                    OutpuPath = _outputPath,
                    UseAssemblyPath = chkUseSamePath.Checked,
                    OverWrite = chkOverwrite.Checked
                };

                _cls = new Ces.ClassToJson.ClassToJson(option);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }
}
